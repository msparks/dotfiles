# Set up (Gentoo-style) prompt
setopt prompt_subst

# http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Visual-effects
#
# %B(%b): Start (stop) boldface mode.
# %F(%f): Start (stop) using a different foreground color.
# %K(%k): Start (stop) using a different bacKground color.
#
# Example: %F{red}this text is in red%f
#
# Color values are 0-255 or {black, red, green, yellow, blue, magenta, cyan,
# white}.

# <hostname>
PR_ROOT_HOSTNAME="%B%F{red}%m%f%b"
# <user@hostmame>
PR_USER_HOSTNAME="%B%F{green}%n@%m%f%b"

# Current working directory with tilde-substitution.
#
# Collapses paths with at least four components to '.../<last two components>'.
# This reduces a path with four components to three, including the '.../'. This
# will shorten paths like so:
#
#   ~                  -> ~
#   ~/foo              -> ~/foo
#   ~/foo/bar          -> ~/foo/bar
#   ~/foo/bar/baz      -> .../bar/baz
#   ~/foo/bar/baz/quux -> .../baz/quux
#   /usr/local         -> /usr/local
#   /usr/local/share   -> /usr/local/share
#   /usr/local/share/a -> .../share/a
PR_PATH="%B%F{blue}%(4~|.../%2~|%~)%f%b"

# Prompt character (# if root, % if not), colored based on the exit code of the
# last command.
#
#  %(x.true-text.false-text): ternary expression.
#  %#: A '#' if the shell is running with privileges, a '%' if not.
#
# http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Shell-state
# http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Conditional-Substrings-in-Prompts
PR_CHAR="%B%(?.%F{blue}.%F{red})%#%f%b"

if [[ $EUID == "0" ]]; then
  PROMPT=$'$PR_ROOT_HOSTNAME $PR_PATH $PR_CHAR '
else
  PROMPT=$'$PR_USER_HOSTNAME $PR_PATH $(cat $PROMPT_FILE 2>/dev/null)$PR_CHAR '
fi

unset RPROMPT

# Asynchronous prompt support: dynamic prompts without blocking.
#
# Based on https://www.anishathalye.com/2015/02/07/an-asynchronous-shell-prompt/
#
# Each zsh process has a temporary file in $PROMPT_FILE to which extra text can
# be written to be displayed in the shell prompt. Functions in the prompt_hooks
# array are run serially in the background and their outputs are written to
# $PROMPT_FILE. The prompt is re-rendered with `zle reset-prompt' after
# $PROMPT_FILE is updated with the new contents.
#
# Example:
#
#   function slow_date() { sleep 3 && date }
#   prompt_hooks+=(slow_date)

function prompt_run_hooks() {
  function run_async() {
    # Collect output from each prompt hook.
    local output=""
    for hook in $prompt_hooks; do
      output+="$($hook)"
    done

    # Write new prompt and signal parent shell.
    echo -n $output > $PROMPT_FILE
    kill -USR1 $$
  }

  # Kill any existing background process generating a prompt.
  if [[ $PROMPT_ASYNC_PID != 0 ]]; then
    kill $PROMPT_ASYNC_PID 2>&1 > /dev/null
  fi

  run_async &!
  PROMPT_ASYNC_PID=$!
}

function TRAPUSR1() {
  # Rerender prompt.
  zle && zle reset-prompt
  PROMPT_ASYNC_PID=0
}

PROMPT_ASYNC_PID=0
PROMPT_FILE="/tmp/zsh_prompt_$$"
touch $PROMPT_FILE

# Array of hook functions that write the dynamic part of the prompt.
typeset -a prompt_hooks

# Start running the hooks before displaying each prompt.
precmd_functions+=prompt_run_hooks

# Delete the prompt file when the shell exits.
trap "rm -f $PROMPT_FILE" EXIT
